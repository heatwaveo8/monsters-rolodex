{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","onChange","type","App","event","setState","searchField","target","value","state","this","filteredMonsters","filter","toLowerCase","includes","fetch","then","response","json","users","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAIMA,EAAO,SAAAC,GACT,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAML,EAAMI,QAAQE,OACpB,4BAAKN,EAAMI,QAAQG,YCHzBC,G,MAAW,SAAAR,GACb,OACI,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAyBA,QAAUA,GAAvBA,EAAQC,WCPlCM,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAC9B,OACI,uBAAOZ,UAAU,SAASa,SAAWD,EAAeE,KAAK,SAASH,YAAcA,MCoCzEI,G,wDAlCb,aAAe,IAAD,8BACZ,gBAQFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAPzC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,0CAad,WACE,MAAkCI,KAAKD,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZK,EAAmBf,EAASgB,QAAO,SAAArB,GAAO,OAAIA,EAAQE,KAAKoB,cAAcC,SAASR,EAAYO,kBAEpG,OACE,sBAAKzB,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAeU,KAAKV,eAC7D,cAAC,EAAD,CAAUJ,SAAWe,S,+BAM3B,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKd,SAAS,CAAET,SAAUuB,W,GA/B7BC,IAAMC,YCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.125e6868.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nconst Card = props => {\n    return (\n        <div className=\"card-container\">\n            <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n            <h2>{ props.monster.name }</h2>\n            <p>{ props.monster.email }</p>\n        </div>\n    );\n};\n\nexport { Card };","import React from 'react';\n\nimport { Card } from './../card/card.component';\n\nimport './card-list.styles.css';\n\nconst CardList = props => {\n    return (\n        <div className=\"card-list\">\n            {\n                props.monsters.map(monster => (\n                    <Card key={ monster.id } monster={ monster } />\n                ))\n            }\n        </div>\n    )\n};\n\nexport { CardList };","import React from 'react';\n\nimport './search-box.styles.css';\n\nconst SearchBox = ({ placeholder, handleChange }) => {\n    return (\n        <input className='search' onChange={ handleChange } type='search' placeholder={ placeholder } />\n    )\n};\n\nexport { SearchBox };","import React from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  handleChange = event => {\n    this.setState({searchField: event.target.value})\n  }\n  \n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    \n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder='search monsters' handleChange={ this.handleChange } />\n        <CardList monsters={ filteredMonsters } />\n      </div>\n    )\n  }\n\n  // Lifecycle method. Runs when React renders our component onto the DOM for the first time\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }))\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}